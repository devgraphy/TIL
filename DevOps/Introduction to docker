[Docker Tutorial | Introduction To Docker & Containerization | Edureka](https://www.edureka.co/blog/docker-tutorial)

개발자와 시스템 관리자 모두에게 유용한 기능을 제공하는 도구는 거의 없다. 도커가 그러한 도구이다.

간략히 말해서 도커는 소프트웨어 컨테이너화 플랫폼이다. 즉, 애플리케이션을 빌드하고 해당 종속성과 함께 컨테이너에 패키징한 다음 이러한 컨테이너를 쉽게 공유(ship)하여 다른 머신에서 실행할 수 있다.

>*For example*
>
>루비와 파이썬 두개로 작성된 리눅스 기반의 애플리케이션을 고려해보자.
>
>이 애플리케이션은 특정 버전의 리눅스, 루비, 파이썬을 필요로 한다.
>
>사용자 측에서 버전 충돌을 방지하기 위해 필요한 루비와 파이썬 버전을 애플리케이션과 함께 설치하여 리눅스 도커 컨테이너를 만들 수 있다.
>
>이제 최종 사용자는 종속성이나 버전 충돌에 대한 걱정 없이 컨테이너를 실행하여 애플리케이션을 쉽게 사용할 수 있다.

이러한 컨테이너는 가상화의 진화된 버전으로 간주 될 수 있는 컨테이너화를 사용한다.

가상머신을 상요하여 동일한 작업을 수행할 수도 있지만 그다지 효율적이지 않다.



*가상화와 컨테이너화의 차이점은 무엇일까?*

*두 용어는 서로 매우 비슷하다. 먼저 가상화부터 살펴보자*



# 가상화(Virtualization)

가상화는 호스트OS 위에 게스트OS를 가져오는 기술이다. 이 기술은 개발자가 모두 동일한 호스트에서 실행되는 서로 다른 가상 머신에서 여러 OS를 실행할 수 있도록 했기 때문에 처음에는 획기적이었다. 따라서 추가 하드웨어 리소스가 필요하지 않았다. 



*가상 머신 또는 가상화의 장점은 다음과 같다.*

* 동일한 시스템에서 여러 운영체제를 실행할 수 있다.
* 고장 시 유지보수 및 복구가 쉽다.
* 인프라에 대한 필요성 감소로 인해 총 소유비용도 감소했다.

*다음 그림은 3개의 게스트OS가 실행중인 호스트OS이다.*

![image-20210204143520475](images/image-20210204143520475.png)

*가상화는 몇 가지 단점을 가지고 있다.*

* 동일한 호스트OS에서 동작하는 여러 가상머신들은 성능 저하를 초래한다. 이는 동일한 호스트OS 위에서 각자의 커널, 라이브러리 그리고 의존성을 갖는 여러 게스트OS 때문이다. 이것은 하드 디스크, 프로세서 및 특히 RAM과 같은 많은 양의 시스템 리소스를 차지한다.
* 가상화의 또 다른 문제는 부팅하는 데 거의 1분이 걸린다. 이것은 실시간 애플리케이션의 경우에 매우 중요한 문제이다.
* 하이퍼바이저는 호스트OS만큼 효율적이지 못하다.



*이러한 단점으로 인해 컨테이너화라는 새로운 기술의 등장으로 이어졌다.*



# 컨테이너화(Containerization)

컨테이너화는 가상화를 운영체제 수준으로 가져오는 기술이다.

```
*운영체제 수준의 가상화, Operating system level virtualization
운영체제의 커널이 하나의 사용자 공간 인스턴스가 아닌, 여러 개의 격리된 사용자 공간 인스턴스를 갖출 수 있도록 하는 서버 가상화 방식이다.

이러한 인스턴스들은 종종 컨테이너, 소프트웨어 컨테이너, 가상화 엔진(VE), jail(FreeBSD jail, chroot jail)이라고도 부르며 소유자와 사용자의 관점에서 실제 서버인 거섳럼 보이게 한다.

출처:widipedia-운영체제 수준 가상화

```



가상화는 하드웨어에 추상화를 가져오는 반면 컨테이너화는 운영 체제에 추상화를 가져온다.

컨테이너화는 가상화의 한 유형이기도 하다. 그러나 여기에는 게스트 OS가 없고 호스트 OS를 활용하고 가상 머신과 달리 필요할 때 관련 라이브러리 및 리소스를 공유하므로 컨테이너화가 더 효율적이다.

애플리케이션별 바이너리 및 컨테이너 라이브러리는 호스트 커널에서 실행되므로 처리 및 실행이 매우 빠르다. 컨테이너를 부팅하는데도 1초밖에 걸리지 않는다. 모든 컨테이너는 호스트OS를 공유하기 때문에 애플리케이션 관련 바이너리 및 라이브러리만 보유한다. 가상머신보다 가볍고 빠르다.



# 가상화 대비 컨테이너화의 장점

* 동일한 OS 커널의 컨테이너가 더 가볍고 작다.
* VM에 비해 더 나은 리소스 활용도
* 부팅 프로세스가 짧다.

![image-20210204145952188](images/image-20210204145952188.png)

# Docker 소개

Docker는 애플리케이션과 모든 종속성을 컨테이너 형태로 함께 패키징하여 애플리케이션이 모든 환경에서 원활하게 작동하도록하는 컨테이너화 플랫폼입니다.

다음 그림에서 볼 수 있듯이 각 애플리케이션은 별도의 컨테이너에서 실행되며 자체 라이브러리 및 종속성을 갖는다. 이는 또한 각 애플리케이션이 다른 애필리케이션과 독립적임을 의미하는 프로세스 수준 격리를 보장하므로 객발자가 서로 간섭하지 않는 애플리케이션을 구축할 수 있다는 확신을 준다.



그래서 다른 애플리케이션이 설치된 컨테이너를 구축하여 개발자 환경을 복제하기 위해 컨테이너를 실행하기만 하면 되는 QA팀에 제공할 수 있다.



# Docker 이점

이제 QA팀은 코드를 테스트하기 위해 몯느 종속 소프트웨어와 응용 프로그램을 설치할 필요가 없으며 이는 많은 시간과 에너지를 절약하는 데 도움이 된다. 이를 통해 개발부터 배포까지 프로세스와 관련된 모든 개인이 작업 환경을 일관되게 유지할 수 있다.

시스템 수를 쉽게 확장 가능하며 코드를 쉽게 배포할 수 있다.





# 가상화 vs. 컨테이너화

가상화 및 컨테이너화는 하나의 호스트 머신 내에서 여러 운영 체제를 실행할 수 있도록 제공한다.

가상화는 단일 호스트 시스템에서 많은 운영 체제를 만드는 것을 다룬다.

반면에 컨테이너화는 모든 유형의 애플리케이션에 대해 여러 컨테이너를 생성한다.

다음 그림에서 보듯이, 큰 차이점은 컨테이너화에는 없지만 가상화에는 여러 게스트OS가 있다는 것이다.

컨테이너화의 가장 큰 장점은 무거운 가상화에 비해 매우 가볍다는 것이다.

![image-20210204214904343](images/image-20210204214904343.png)

# Dockerfile, Docker Image & Docker Container

1. 도커 이미지는 Dockerfile 이라는 파일에 작성된 일련의 명령에 의해 생성된다.
2. 이 Dockerfile 이 docker 명령을 사용하여 실행되면 이름을 가진 도커 이미지가 생성된다.
3. 이 이미지가 "docker run"명령으로 실행되면 실행시 시작해야하는 모든 응용 프로그램이나 서비스를 자체적으로 시작한다.



# Docker Hub

Docker hub는 docker 이미지용 github와 같다. 기본적으로 다른 커뮤니티에서 업로드한 이미지를 받을 수 있는 클라우드 레지스트리이다. 또한 자신의 이미지를 개발하고 Docker hub에 업로드할 수도 있지만 먼저 계정을 만들어야 한다.

# Docker Architecture

세 가지로 구성 요소를 가진 클라이언트-서버 애플리케이션인 Docker engine으로 구성된다.

1. SERVER: 데몬 프로세스(도커 명령어)라고 하는 장기 실행 프로그램의 하나의 형태
2. REST API: 프로그램이 데몬과 통신하고 작업을 지시하는 데 사용할 수 있는 인터페이스를 지정한다.
3. CLI: Command Line Interface Client
   * 

# Docker Compose

Docker compose는 기본적으로 여러 도커 컨테이너를 단일 서버로 실행하는 데 사용된다.

*예를 들어보자.*

*WordPress, Maria DB 및 PHP MyAdmin이 필요한 애플리케이션이 있다고 가정합니다. 각 컨테이너를 개별적으로 시작할 필요없이 두 컨테이너를 서비스로 시작하는 하나의 파일을 만들 수 있습니다. 특히 마이크로 서비스 아키텍처가있는 경우 특히 유용합니다.*

